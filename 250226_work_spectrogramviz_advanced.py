# -*- coding: utf-8 -*-
"""250226_WORK_SpectrogramVIZ.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NsiGvOCfYLfsZnjTr7DG6HpHPMvPFKbI
"""

import streamlit as st
import zipfile
import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import scipy.signal as signal

st.set_page_config(layout="wide")
st.title("Spectrogram VIZ")

# Function to extract ZIP files
def extract_zip(zip_path, extract_dir="extracted_csvs"):
    if os.path.exists(extract_dir):
        for file in os.listdir(extract_dir):
            os.remove(os.path.join(extract_dir, file))
    else:
        os.makedirs(extract_dir)

    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        zip_ref.extractall(extract_dir)
    csv_files = [f for f in os.listdir(extract_dir) if f.endswith('.csv')]
    return [os.path.join(extract_dir, f) for f in csv_files], extract_dir

# Function to segment beads
def segment_beads(df, column, threshold):
    start_indices = []
    end_indices = []
    signal_data = df[column].to_numpy()
    i = 0
    while i < len(signal_data):
        if signal_data[i] > threshold:
            start = i
            while i < len(signal_data) and signal_data[i] > threshold:
                i += 1
            end = i - 1
            start_indices.append(start)
            end_indices.append(end)
        else:
            i += 1
    return list(zip(start_indices, end_indices))

# Function to generate spectrogram
def generate_spectrogram(df, start, end, fs=10000):
    sample_data = df.iloc[start:end, :2].values
    nperseg = min(1024, len(sample_data) // 4)
    noverlap = int(0.99 * nperseg)
    nfft = min(2048, 4 ** int(np.ceil(np.log2(nperseg * 2))))

    f, t, Sxx = signal.spectrogram(sample_data[:, 0], fs, nperseg=nperseg, noverlap=noverlap, nfft=nfft)
    Sxx_dB = 20 * np.log10(np.abs(Sxx) + np.finfo(float).eps)
    return f, t, Sxx_dB

with st.sidebar:
    uploaded_file = st.file_uploader("Upload a ZIP file containing CSV files", type=["zip"])
    if uploaded_file:
        with open("temp.zip", "wb") as f:
            f.write(uploaded_file.getbuffer())
        csv_files, extract_dir = extract_zip("temp.zip")
        st.success(f"Extracted {len(csv_files)} CSV files")

        df_sample = pd.read_csv(csv_files[0])
        columns = df_sample.columns.tolist()
        filter_column = st.selectbox("Select column for filtering", columns)
        threshold = st.number_input("Enter filtering threshold", value=0.0)

        if st.button("Segment Beads"):
            bead_segments = {}
            for file in csv_files:
                df = pd.read_csv(file)
                segments = segment_beads(df, filter_column, threshold)
                bead_segments[file] = segments
            st.session_state["bead_segments"] = bead_segments
            st.success("Bead segmentation complete")

if "bead_segments" in st.session_state:
    for file, segments in st.session_state["bead_segments"].items():
        df = pd.read_csv(file)
        fig, axes = plt.subplots(1, len(segments), figsize=(15, 5))
        for i, (start, end) in enumerate(segments):
            f, t, Sxx_dB = generate_spectrogram(df, start, end)
            ax = axes[i] if len(segments) > 1 else axes
            ax.pcolormesh(t, f, Sxx_dB, shading='gouraud', cmap='jet')
            ax.set_title(f'Bead {i+1}')
            ax.set_xlabel("Time (s)")
            ax.set_ylabel("Frequency (Hz)")
        st.pyplot(fig)